// Code generated by go-bindata.
// sources:
// static/app.js
// static/favicon.png
// static/index.html
// DO NOT EDIT!

package admin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/kelseyhightower/confd/log"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4f\x6b\x1b\x47\x14\xbf\xfb\x53\xbc\x6e\x4d\x67\x85\x94\xd1\x7d\x83\x08\xad\x5d\x88\xa1\xa1\x39\xa5\x98\x90\xc3\x64\xf7\x49\x9a\x7a\x76\x66\x99\x99\xb5\x6c\xca\x9e\x1b\x02\x85\x1e\x72\x71\x29\xb4\x06\x17\x0a\x05\x9b\x42\x4f\xfd\x3e\x8a\xed\x6f\x11\x66\x77\x2d\xed\x4a\xb3\x92\x6d\xc8\x5c\x6c\xed\xfb\xf7\x7b\xbf\x79\x7f\x26\x1c\xe7\x32\xb6\x5c\xc9\x10\x4f\x32\xa5\xad\xe9\xc1\x4f\x3b\x00\x00\x24\x37\x08\xc6\x6a\x1e\x5b\x52\x7e\xa8\xe5\x94\x65\x19\x8c\x60\x69\x26\x0e\x92\x3b\x1b\x77\x34\xda\x5c\x4b\x90\x38\x83\x57\x39\x86\x4b\x81\x3b\x19\xb3\x53\x13\x41\xfb\xa3\x3b\x09\x0a\xb4\x18\x01\x19\x56\xff\x91\xc1\x9a\x8a\x41\xeb\xe4\x06\xad\x47\x38\xa9\x84\x13\xac\xc1\xde\x9d\xa2\xad\x8a\x22\x02\xf2\x25\x81\x3e\x38\xd8\x6d\x59\xc2\x2c\xf3\x41\xe3\x16\x53\x13\xc1\xeb\x37\x3e\x48\x02\x63\x8b\xc9\x4b\xad\x7e\xc4\xd8\xfa\xac\xdd\x91\x2c\x75\xa9\x79\x60\x97\x9c\x68\x1c\xf3\x13\x27\x5f\x13\x17\xdd\x21\x0f\x2c\xa6\x5d\xf1\x8e\xf0\xb4\x3b\xdc\x31\x13\xf9\x46\x34\x75\x2a\x3e\x38\x3b\x9b\xb8\x4d\xd1\x4e\x55\xb2\xf1\x76\x17\x45\xe3\x38\xed\x75\xa0\x3f\x66\xda\x65\x39\x86\x11\xd8\x29\x37\x4f\xbd\x4a\x39\xa7\xb1\x92\x63\xae\xd3\x90\xcc\xdf\xfd\x79\x7b\x76\x71\x7d\x7e\x79\x73\x79\x41\x06\x40\xae\xcf\x2f\xe7\x97\xbf\x55\x5f\x5f\x93\x7e\x79\x81\xb4\xce\x0b\xfa\xe4\x8d\xbb\xfe\xf2\xdb\x11\x9e\x42\x1f\xc8\x33\x32\x58\x22\x73\xa8\xbc\x11\xdd\x61\x27\x5c\x19\x5a\x65\x13\x3a\x8c\x74\x57\x65\xce\xcc\xd0\xb2\xb2\x6b\x11\xf4\x21\x78\x56\x07\x1c\x05\xfd\x66\xfc\x7e\xf0\xd5\x11\x9e\x06\x0d\x04\x3d\x6a\xa7\x28\x97\x6d\xa8\xd1\x64\x4a\x1a\xec\xa2\xe7\xee\xf0\x31\x2c\x74\xa9\xab\x5d\xaa\xd1\xe4\xc2\x6e\xb3\xab\xd9\x63\x02\xb5\x0d\x89\xe3\xab\x62\xea\xe3\xbb\x5f\xe7\xef\xff\x70\xbf\x4d\x1e\xc7\x68\x0c\xe9\xf9\xa9\x6f\x9e\x92\x83\xb2\x41\xe8\xae\xc6\x54\x1d\x63\x75\xb5\x9b\x2d\x0b\x40\x61\xf0\x41\x38\x2b\x8c\xf3\x8b\x7f\x6f\xfe\xfb\x8b\x0c\xa0\x9d\x78\x6a\x26\x03\x20\xa8\xb5\xd2\xdb\x40\x17\x9d\xd2\xa2\x47\x63\x66\xe3\x69\x63\x20\x6a\xbd\x8d\x4c\x1f\x91\xf3\x9f\xff\xbf\xfd\x70\x46\xee\x8b\x28\x56\xd2\x28\x81\x54\xa8\x49\x19\xb1\x5b\xbb\xe8\x79\x45\x85\xc7\xc4\x3b\x38\x98\x8e\xa7\x51\xab\xd2\x3d\x6a\x42\xb1\x64\xbf\x9c\x84\xad\x96\xf0\x05\x5e\x69\xd4\x4e\x1d\xd7\x1a\x30\x02\x5f\xbf\x4c\xd0\xfa\xf3\xad\x3a\x6d\x82\x36\x74\x8a\xfe\xc4\xdd\x79\x64\xf3\xe4\x9c\x4e\x79\x82\xdf\x29\x96\x70\x39\x09\xbb\xfd\xc3\x86\x4e\x83\xd1\x68\x04\x63\x26\xb6\x87\x83\x76\x2d\xdf\x15\xc8\x86\x2a\x7e\x64\x11\x43\xab\x27\x61\xb4\x12\xa2\xfc\xfa\xd0\xfa\x72\xe7\x71\xad\x71\x7f\x8a\x3d\xe4\x90\x8f\xbf\xff\x32\x7f\x7f\x3e\x3f\xfb\xfb\xfa\x9f\xab\xdb\x0f\x67\x37\x57\x57\xe4\x9e\xfc\xac\xb6\xd4\x43\x32\x2e\x36\xad\xb8\x31\x17\x16\xb5\x77\xc5\x0d\x87\xa9\x4a\x51\xda\x46\xdf\x58\x9e\xa2\xb1\x2c\xcd\x7c\x54\x0d\x87\xf5\x43\xa9\x32\x6b\x28\xd3\xb1\xd2\x29\xb3\x21\x39\x3c\x7c\xf2\xe2\xc5\x93\xfd\x7d\x78\xfe\x3c\x4a\xd3\xc8\x4d\x64\x8f\x9b\x8d\x80\x35\xb2\xe4\x74\x4b\x2b\xe7\x9c\x8a\xce\x4b\x6a\x52\x49\x4a\x6f\x40\xa9\x07\x87\x1b\x00\xf4\x6e\x76\xac\xf8\x59\x22\xac\xf9\x2e\x9e\xee\xec\xb4\x9e\x94\x39\x87\x51\x73\xef\xd6\xab\xbd\xc5\xa5\x15\x38\x80\xb2\x47\x94\xfc\x3a\xcb\xb4\x3a\xc6\xb5\x5d\x6d\x66\x4c\x84\xeb\x19\x96\xc6\x51\xf5\x67\x7d\xe2\x59\x3c\xb1\x51\xe9\x79\x5d\x74\x9a\x61\x04\x01\x97\x63\x15\x78\x26\xea\x54\xcd\xf6\x98\x8c\x51\x7c\x93\x5b\xab\x64\x04\x56\xe7\x9e\x00\xb1\x50\x06\xbf\x97\x7b\x8b\xa4\xdc\xc8\xf0\xbb\x73\xdd\x82\xba\xa1\xbb\xee\xb1\x18\x6c\xbe\xce\x05\x3b\xe1\xca\x5e\x70\x7b\x62\x79\x13\x4b\xa7\x99\x56\x69\x66\x3b\xb8\xce\x04\x8b\x71\xaa\x44\x82\x7a\x00\xf1\xdb\xd5\x80\x9f\x8d\xf0\x2c\xb7\x9f\x9f\xf1\x32\xcc\xcb\x65\x86\x11\x04\x3f\x68\x6e\x11\x8c\x72\x8f\x59\x2e\x27\x41\x27\xf5\xa5\xed\x2b\xf7\x96\xf6\x5d\x82\x5b\x19\x4b\x8d\xe6\xa2\xa8\xbb\xbe\xfc\xb5\xbe\xfa\x3c\x76\x41\xd0\x35\x69\x1d\xf9\xd4\x51\x72\xe0\x2c\xbe\x75\x83\x31\x0c\x0e\x55\x0e\x12\x31\x01\xab\x60\xd6\x4e\xe6\x8b\xa0\xe3\x71\xd1\xc4\xb4\x65\x20\x96\xec\xbe\x6d\x66\xbf\x5e\x64\x4b\xba\x16\xff\xd6\x03\xa6\x7b\x12\x0d\x87\xb0\x1b\x12\xf7\xa6\xb7\x8c\x4b\xd4\xa4\x47\x59\x92\xec\x09\x66\x4c\x48\x58\x6c\xf9\x31\x12\xbf\xeb\xc6\x92\xd9\x30\xe8\x86\xc3\x55\xf7\xd5\x73\xf5\x3e\x11\xca\xcd\xd4\xd1\x1f\xae\x60\xbd\x4d\xb1\xa6\xd4\x70\xbd\x18\x82\x45\x2f\x9c\x71\x99\xa8\x59\x6f\xe7\x53\x00\x00\x00\xff\xff\xc1\x45\x09\x46\x88\x0f\x00\x00")

func staticAppJsBytes() ([]byte, error) {
	return bindataRead(
		_staticAppJs,
		"static/app.js",
	)
}

func staticAppJs() (*asset, error) {
	bytes, err := staticAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/app.js", size: 3976, mode: os.FileMode(420), modTime: time.Unix(1473903219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticFaviconPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x84\x04\x7b\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x04\x3e\x49\x44\x41\x54\x58\x09\xbd\x57\x5d\x68\x54\x57\x10\xfe\x76\xdd\x26\x96\x26\x69\x56\x0c\x5b\xd2\x58\x76\xa3\xb8\x68\xc4\x3e\xb8\x86\xb6\xf6\x2f\x10\xac\x24\x22\x35\x1a\xaa\x84\xfa\x12\x41\xcc\x8b\xa2\x08\x41\xd1\x90\xc8\x82\x55\x68\x69\x29\xab\xf4\x27\x0f\xda\x60\xfa\x62\x5b\x6b\x49\xdc\x07\x35\xf8\x53\xd1\x15\x91\x62\x64\x63\x4c\x82\xc6\xa5\x41\x64\x53\x13\xdb\x55\x92\xac\xdf\xdc\xdc\x5c\xef\xc6\xfb\x17\x70\x3b\x70\x38\x73\xcf\xcc\x99\x6f\xce\x9c\x73\xe6\xcc\x75\xc1\x39\xe5\xf8\xfd\xfe\x0a\x97\xcb\xb5\x86\x53\x16\xb3\x15\x93\x2f\x96\xe9\xe9\x74\x3a\xc1\x4e\x5a\x37\xf9\x93\x03\x03\x03\x67\xc9\x3f\x65\xb3\x25\x97\x9d\x06\x41\xdf\x70\xbb\xdd\xfb\xa8\x57\xc7\x56\x60\xa7\xaf\xca\x1f\xb1\x6f\x9b\x98\x98\x68\xa1\x33\x7f\x5b\xcd\xb1\x72\x20\x37\x10\x08\xec\xe1\xe4\x1d\x5c\xe9\x6b\x56\x46\xcc\x64\x8c\xc6\x63\xca\xbe\xec\xef\xef\x0f\xb3\x7f\x62\xa4\x67\xe8\x80\xac\x9a\xa0\xbf\xb0\xbd\x63\x34\x69\xa6\x63\x74\xe4\x32\xdb\x5a\xa3\x68\xbc\xe0\x00\x57\xbd\x94\xc0\x7f\x10\xa4\x64\xa6\x40\x36\xfa\x83\x94\x57\xf5\xf5\xf5\xfd\xa5\xd7\xcb\x70\x40\xdd\xef\xab\x54\x78\xd9\xe0\x53\x98\x83\x3c\x17\xcb\xf5\x91\x70\x4f\x49\xd8\xe7\x4a\xd8\xb3\x08\x2e\x50\x25\x2a\x46\xae\x7c\x08\xcd\x9a\xec\x00\x86\xbe\x89\x42\x39\xe9\x59\x25\x62\x94\x14\x16\x16\xa6\x87\x87\x87\xe5\xaa\x42\xd9\x02\xf5\xd0\xf5\x52\xe8\xe0\xb4\xfb\xd0\x10\x0e\x63\xf5\x87\x4b\xf0\x66\x41\x3e\x3c\x1e\x60\xec\xbf\x11\x0c\xdd\xef\xc1\xc5\xd3\xc7\xd1\x1c\xe9\xb0\x5d\x80\xdc\x0e\xb6\x05\xb2\x15\x8a\x03\xa5\xa5\xa5\x11\xce\xda\x6a\x3b\xd3\x57\x87\xdf\xa2\x2d\x58\x92\x67\xa1\x39\x7a\x07\xdf\x37\x7e\x8e\x03\x1d\x43\x16\x4a\x8a\xe8\x30\x0f\x64\x83\x9c\x81\x1c\x36\x47\xa1\x3f\x74\x6c\xb7\x35\xb8\xd8\xcd\x9b\x8f\xb7\x03\x85\xc2\xd9\x91\x60\xe6\x78\x18\xfe\x0a\x32\xf6\x19\x2e\xd8\x88\x95\xf3\x67\x6b\x46\x47\xef\x9c\xc5\xc1\xaf\x8e\x20\xfe\x6f\x11\xca\xdf\x5d\x85\xd5\x9f\x56\x22\x58\x44\x79\x22\x8a\xed\x91\xb8\xa6\x67\xc1\x14\x08\xb6\x87\xfb\x2e\xb9\x7d\x86\x94\x42\x34\xbc\x19\x6d\x5d\x93\xd3\x62\x5d\x1d\x88\x1c\x00\x6a\x1a\xc3\xf0\xdf\xf8\x06\xb6\xc1\x57\xd1\x04\x7b\x96\xd7\xeb\xdd\x45\xc6\xaf\x8e\x99\x77\x81\xf7\xb1\xb5\x76\x99\xb2\x5f\x80\x07\x8b\xaa\x6b\xb1\x28\xcf\x8d\xa1\x07\xd7\x91\x78\x38\x39\xed\xd6\x85\x33\xf8\xb3\x57\xb2\xaf\x63\x7a\xec\xe2\xf5\x8b\xd3\x81\x85\xb6\x53\x7c\xf5\x38\x7f\x69\x37\x94\xe7\x6f\x9a\x72\x2a\x79\x17\xd7\x2e\x9e\xc3\xaf\xc7\x8e\xe0\x44\xcc\xe9\xfa\x95\x57\xb4\xc7\xc5\x1b\x30\x42\x7b\x56\xe7\x5a\x83\x0b\x35\xfc\x80\xb6\x9d\x15\x5c\xbf\x39\x25\xae\x1c\xc5\xfa\x8d\xcd\x4e\xb7\x61\x54\x9f\x09\xcd\xad\xaa\x92\x58\x64\x33\x82\x55\xbb\x70\xea\x4a\x1c\xc9\x94\xb1\x7a\x71\xf9\x26\xb4\x7f\xed\xe8\x52\x89\x81\xb4\xf3\x2d\x30\xc0\x0b\x7d\x54\x83\xea\x9a\x5a\x54\x56\x96\xa3\xf8\xf9\x05\x01\x52\xd7\xf1\x59\xd9\x7a\xc4\x0c\xe6\xe8\x87\x98\x8c\x7a\x24\x02\x52\xc9\x38\xa2\x86\xc3\x47\x11\xae\x0b\x69\xba\xb1\xae\x13\x68\xde\xb6\x11\x1f\x94\xbd\x87\x53\x77\x4d\x42\xa2\x69\x1b\x32\x09\x71\xa0\xdb\x50\x34\x7d\x30\xd4\x84\x2d\x2b\x57\x60\x43\xcb\xcf\x88\x45\x8f\xa3\xa9\xbe\x06\x41\x9f\xaa\xe4\x5b\x01\xaf\xe4\x64\x8d\x5e\x81\x83\x9c\x2e\xda\xdd\x2e\x26\x83\x4f\x58\x72\x75\x6a\x73\x4d\x98\x70\xf4\x26\x36\xe8\x12\xd1\x94\xda\x58\x2a\x05\xcf\x6c\x7d\xfc\xb9\x03\xf1\x76\x94\x55\xed\x99\x52\x31\xed\xf9\x34\xaf\x72\xf3\x41\x90\x57\x49\x6a\x38\x4b\xba\x7f\xab\x17\x63\x06\x1a\xd3\xc1\x81\x07\xf8\x71\x9f\x3d\x38\x4d\x3d\x12\x6c\x79\x8e\xc7\x99\x8c\xde\x62\xbf\xdc\xc0\xbe\x36\x74\xb5\xb3\x1d\xdf\x9e\xbe\x0d\x6f\xd1\x5c\x14\xcd\x79\x1d\xf9\xaf\xca\x13\xa2\xa7\x31\x24\xe2\x5d\x38\xb4\x69\x0d\xbe\xcb\xa8\x79\xf4\x3a\x19\x7c\x6b\x32\x99\x3c\xa9\xbc\x86\x33\x7b\x8e\x55\x23\x3e\x1f\x42\xf3\xe6\x61\x84\x59\x24\x3f\x7f\x04\xf7\x62\x71\xa7\x77\x5f\xca\xf8\xcc\xe7\x58\x4c\x32\x23\xb6\x30\x23\xee\xcd\xf0\x31\x4b\x1f\x74\x60\x3f\x2b\x65\x29\xf5\x27\x0b\x12\x15\x47\xca\xf0\x73\x74\xe2\xa5\x54\xc2\x66\xbe\x13\xfc\x32\xc1\x3f\xa6\x5c\x29\xd3\xf5\x99\xf0\x09\x85\x6b\x29\x90\xea\x35\x5b\x34\xa8\x62\x68\xff\x08\x7a\x07\x20\x25\x12\x15\xaa\x89\x9e\x0d\x27\xc4\x66\x95\x60\xe8\x57\xa7\x1c\x42\xfd\x80\xf0\xea\xa1\xfc\x5f\x7e\x4c\xb4\xaa\x58\xef\x04\x2b\xd6\x51\xb6\x9f\xa4\x7a\xe5\x78\x88\xe7\x62\xfa\x9d\xd3\xab\x9b\xf2\x8c\xa6\x14\x07\x5f\x70\xcf\xeb\x69\xef\x1f\x23\x45\x43\x07\x54\xc5\x71\x29\x9d\xe9\x44\x2b\x1d\x90\xcc\x1a\x64\xd3\xea\x79\x23\x63\xba\x31\x49\x6c\xad\x74\x60\x1d\x43\xfe\x3b\xf9\x71\x9d\x2c\x83\x35\xdc\x82\x0c\x8d\xe7\x1f\x59\xf9\x3d\x7f\x06\x82\x92\x7e\xfa\xaa\x9c\x01\x75\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xd5\xf3\x7a\x1f\x84\x04\x00\x00")

func staticFaviconPngBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconPng,
		"static/favicon.png",
	)
}

func staticFaviconPng() (*asset, error) {
	bytes, err := staticFaviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.png", size: 1156, mode: os.FileMode(420), modTime: time.Unix(1473903219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\xb8\x3c\x74\x77\x81\x58\x94\x13\x23\x28\x12\x49\x45\xb1\xbb\xed\xad\xbb\xa8\x73\xe9\x71\x4c\x8d\x2c\x3a\x14\x29\x90\x63\x39\xee\xa9\xef\xd0\x37\xec\x93\x14\x12\xe5\x9f\xfa\x27\x71\xb6\x2e\xb0\x0d\x02\x8b\xe4\xfc\x7e\x1f\x87\x1a\x2a\x79\xf3\xf1\xf3\x87\x87\xdf\xbe\x7c\x62\x25\x55\x3a\x1b\x24\xed\x83\x69\x30\xb3\x94\xa3\xe1\xed\x02\x42\x9e\x0d\x18\x4b\x2a\x24\x60\xb2\x04\xe7\x91\x52\xbe\xa0\x62\xf8\x3d\xef\x04\xa4\x48\x63\x26\xad\x29\x72\x06\x79\xa5\x4c\x22\xc2\xd2\xc6\xca\x40\x85\x29\xcf\xd1\x4b\xa7\x6a\x52\xd6\x70\x26\xad\x21\x34\x94\xf2\x60\x27\xad\xf1\x56\x23\xdf\xb7\x69\x14\x2e\x6b\xeb\x68\xc7\x60\xa9\x72\x2a\xd3\x1c\x1b\x25\x71\xd8\x4d\xae\x98\x32\x8a\x14\xe8\xa1\x97\xa0\x31\x1d\xf1\x6c\xd0\xfa\x79\x33\x1c\xb2\x9f\x3e\xff\xf2\x30\x60\xec\xaf\x3f\xfe\xfc\x06\xff\xd9\x70\xd8\x01\xd6\xca\x3c\xb2\xd2\x61\x91\x72\x21\x0a\x6b\xc8\x47\x33\x6b\x67\x1a\xa1\x56\x3e\x92\xb6\x12\xd2\xfb\x1f\x0a\xa8\x94\x5e\xa5\xbf\x82\xc6\x25\xac\xee\xc6\x71\x7c\x75\x13\xc7\x57\xb7\x71\xcc\x99\x43\x9d\x72\x4f\x2b\x8d\xbe\x44\x24\xce\x68\x55\x63\xca\x09\x9f\xa8\xb5\x0d\xbc\xb6\x7c\x7c\x98\x4c\xbe\x6d\x3a\x02\x19\x07\x78\x02\x3b\x25\x51\xed\xef\x84\x90\xb9\x99\xfb\x48\x6a\xbb\xc8\x0b\x0d\x0e\x3b\x8e\x60\x0e\x4f\x42\xab\xa9\x17\xc6\xba\x0a\xb4\xfa\x1d\xc5\x38\xba\x8e\xe2\xed\x3c\xaa\x94\x89\x02\x1f\x97\x88\xe3\x1f\x51\x23\x59\x23\xae\xa3\x38\x1a\x6f\xa6\x97\x8e\xb2\x44\x24\xd0\xe8\x48\x8c\xa2\x51\x74\xb3\xb3\xb0\x13\x69\x5d\xef\xd0\x28\x69\xcd\xff\x66\x8f\xdb\x64\xd7\xd5\xaa\x2a\x98\xa1\xa8\xcd\x6c\x4d\x50\x11\xc0\x44\xed\x52\x36\x48\xc2\xeb\x83\x79\x27\xdb\x73\xf2\x02\x6b\xcd\x02\xc5\x28\x8a\xa3\xeb\xdb\x76\xd8\x11\x35\xf7\x3c\x4b\x44\xf0\xb2\x75\xb7\x73\x52\xe6\xd0\x40\x58\xe5\x21\xca\x85\x76\xe8\x3f\x0b\x0c\x4f\xca\x7a\x11\x47\xa3\x9b\x68\x14\x26\xcf\xc4\xeb\x1c\x43\x5d\xef\x8b\x45\x78\xc5\x27\x53\x9b\xaf\xda\x3a\x62\x2c\xc9\x55\xc3\xa4\x06\xef\xbb\xf7\x33\x81\x32\xe8\x38\x53\xf9\xee\x34\xa8\xee\xab\x3b\xbb\xdc\x91\x74\xd2\x72\xdc\x37\x87\x1f\x43\x73\x28\xc7\x3b\xa6\x22\x57\xcd\xd9\x9e\x76\xa4\xb4\xb4\x4c\x5a\xbd\xa8\x8c\xdf\xd3\xea\x34\x35\x4c\x51\xb3\xc2\xba\x94\xd7\xce\xce\x51\x92\xe7\xd9\x04\x35\x4a\x62\x5f\xc2\x42\x22\x3a\xa5\x23\xc6\x3e\xe8\xf5\x91\x16\xc3\x62\xa1\x75\xe8\x34\xbc\x6f\x4b\x1b\x9f\x1d\x27\xdb\x08\x07\xbe\x3a\x7f\xb6\xeb\x79\xac\x01\xbd\xc0\x94\xf3\xac\xf7\x5f\xaf\xf3\x08\xf2\xb3\x8c\x67\xda\x4e\x41\xf3\x2c\x3c\x4f\x9b\x26\x22\x04\xd9\x23\xf0\x9f\x6c\x1f\x70\x5a\x3a\xc4\xb3\x59\xc5\x42\x3d\xf1\x2c\x3c\x4f\x73\xa9\x4c\xbd\x38\x41\xe5\xb6\xfe\xf9\x86\x1b\xe6\x10\x72\x6b\xf4\x4a\xbc\x2a\xf3\x42\x35\xe7\x26\xfe\x88\x2b\x9e\x3d\xe2\xea\x5f\xa7\x1c\x2a\xa1\x75\xd7\x15\x41\x37\xd8\xc0\xa8\x35\x48\x2c\xad\xce\xb1\x0f\xf9\x3c\x9e\xaf\x3f\x06\x68\x5e\x83\xbb\xcb\xef\x42\xc8\x3b\x5f\x01\x7b\x03\xed\xe8\x38\xf8\xa0\xf6\xba\xed\x3c\xff\x70\x4f\xc9\x4c\x90\x78\xf6\x9d\x99\xfa\xfa\xfe\x2b\x90\xb1\xe9\x82\xc8\x9a\x61\xed\x54\x05\x6e\xb5\x06\x1a\x56\x03\xba\x3e\xc6\x1a\xdf\xe4\xd3\x03\x67\x97\xdc\x4e\x82\xa9\xc6\xa3\xac\x1f\x01\x42\xeb\xfb\xf8\xe1\x5f\x42\xee\xb8\xa0\x37\x0c\x55\x4f\xe5\xf3\x4a\x7d\x89\xbc\xa4\x76\x5a\x23\x11\xc7\xf2\x68\xf5\x8f\x66\x9e\xd0\xb6\xef\xbc\x12\x51\x9e\x7d\x84\x06\xd9\xcf\x50\x81\x2c\xdb\x9c\x4f\x10\xb3\xd6\xbe\xbe\x7d\x59\x27\x81\xfe\xee\xb1\x6d\xc9\x77\x8d\x55\xf9\xbb\xf7\xf7\x3c\xcb\xdb\xfb\x1d\x26\x02\xb2\xd3\x8e\x4e\xc2\x3f\x84\x99\x88\x6e\xeb\x8f\xd6\x4d\x3f\x7c\xe1\xae\x70\xe4\x73\x8c\xb1\x06\x1c\x83\xba\x66\x69\xfb\xfb\xee\xed\xa6\x63\xbf\x7d\x7f\x3f\xd8\x6d\xfb\x21\xa1\x44\x84\x2f\xbf\xbf\x03\x00\x00\xff\xff\xc8\x16\x38\x54\x0a\x0e\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3594, mode: os.FileMode(420), modTime: time.Unix(1473903219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	log.Debug("cannonicalName:" + cannonicalName)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	log.Debug("Asset not found")
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/app.js":      staticAppJs,
	"static/favicon.png": staticFaviconPng,
	"static/index.html":  staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"app.js":      &bintree{staticAppJs, map[string]*bintree{}},
		"favicon.png": &bintree{staticFaviconPng, map[string]*bintree{}},
		"index.html":  &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
